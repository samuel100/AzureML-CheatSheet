{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{106:function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return p})),n.d(t,\"b\",(function(){return h}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),l=function(e){var t=o.a.useContext(c),n=t;return e&&(n=\"function\"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:\"code\",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,c=u(e,[\"components\",\"mdxType\",\"originalType\",\"parentName\"]),p=l(n),b=r,h=p[\"\".concat(a,\".\").concat(b)]||p[b]||d[b]||i;return n?o.a.createElement(h,s(s({ref:t},c),{},{components:n})):o.a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if(\"string\"==typeof e||r){var i=n.length,a=new Array(i);a[0]=b;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType=\"string\"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}b.displayName=\"MDXCreateElement\"},146:function(e,t,n){\"use strict\";n.r(t),t.default=n.p+\"assets/images/logging-metrics-a151a23cc2167f2b40ef5d4ee5e86b01.png\"},73:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"frontMatter\",(function(){return a})),n.d(t,\"metadata\",(function(){return s})),n.d(t,\"rightToc\",(function(){return u})),n.d(t,\"default\",(function(){return l}));var r=n(2),o=n(6),i=(n(0),n(106)),a={title:\"Run History\"},s={unversionedId:\"run-history\",id:\"version-1.15.0/run-history\",isDocsHomePage:!1,title:\"Run History\",description:\"Azure ML can supercharge your ML workloads in (at least!) two ways:\",source:\"@site/versioned_docs/version-1.15.0/run-history.md\",slug:\"/run-history\",permalink:\"/docs/run-history\",editUrl:\"https://github.com/facebook/docusaurus/edit/master/website/versioned_docs/version-1.15.0/run-history.md\",version:\"1.15.0\"},u=[{value:\"Experiments and Runs\",id:\"experiments-and-runs\",children:[]},{value:\"Snapshot\",id:\"snapshot\",children:[]},{value:\"Metrics\",id:\"metrics\",children:[]}],c={rightToc:u};function l(e){var t=e.components,a=Object(o.a)(e,[\"components\"]);return Object(i.b)(\"wrapper\",Object(r.a)({},c,a,{components:t,mdxType:\"MDXLayout\"}),Object(i.b)(\"p\",null,\"Azure ML can supercharge your ML workloads in (at least!) two ways:\"),Object(i.b)(\"ul\",null,Object(i.b)(\"li\",{parentName:\"ul\"},\"AML Compute: Providing powerful compute resoures to train larger models\"),Object(i.b)(\"li\",{parentName:\"ul\"},\"Run history: Best-in-class lineage and reproducability\")),Object(i.b)(\"p\",null,\"In this article we focus on Run History - and why you need it in your life!\"),Object(i.b)(\"p\",null,\"As teams progress to running dozens, and eventually hundreds of experiments, having\\nsome way to organize them is essential. Run History is a service that provides a number\\nfeatures that quickly become essential to your ML-model builders:\"),Object(i.b)(\"h3\",{id:\"experiments-and-runs\"},\"Experiments and Runs\"),Object(i.b)(\"p\",null,\"When you are running dozens of experiments in multiple different projects, having a clear\\nway to organize and search though the results is key. Azure ML provides two concepts to help\\nwith this: \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"Run\"),\"s and \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"Experiment\"),\"s.\"),Object(i.b)(\"h4\",{id:\"runs\"},\"Runs\"),Object(i.b)(\"p\",null,\"A run is a single execution of your code - usually a training script. The run has a life-cycle:\\nthe code is prepared to be submited to Azure ML (e.g. via a ScriptRunConfig), then the code is\\nsubmitted\"),Object(i.b)(\"p\",null,\"Once the code is submitted to Azure ML (for example, via a \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"ScriptRunConfig\"),\") a \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"Run\"),\" object is\\ncreated. This compute target is prepared (nodes are provisioned, containers hosting your Python\\nenvironment are fired up), the entry point script is called (\",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"$ python run.py [args]\"),\") and logs\\nstart being generated:\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(r.a)({parentName:\"pre\"},{className:\"language-console\"}),\"Files already downloaded and verified\\nepoch=1, batch= 2000: loss 2.19\\nepoch=1, batch= 4000: loss 1.82\\nepoch=1, batch= 6000: loss 1.66\\n...\\n\")),Object(i.b)(\"p\",null,\"You may log metrics to Azure ML with \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"run.log('<metric_name>', metric_value)\"),\" and monitor them in the studio:\"),Object(i.b)(\"p\",null,Object(i.b)(\"img\",{src:n(146).default})),Object(i.b)(\"p\",null,\"The training concludes, usually some model files are saved, and the nodes are\\nreleased.\"),Object(i.b)(\"p\",null,\"But the story doesn't end there. The run persists even after the nodes are returned\\nto Azure. You can always return, either in code or via the studio, to see a history\\nof your runs, all their outputs and metrics, and the exact code that was used to generate them.\"),Object(i.b)(\"h4\",{id:\"experiments\"},\"Experiments\"),Object(i.b)(\"p\",null,'An Experiment is a collection of runs. All runs belongs to an Experiment. Usually\\nan Experiment is tied to a specific work item, for example, \"Finetune Bert-Large\",\\nand will posses a number of runs as you iterate toward this goal.'),Object(i.b)(\"h3\",{id:\"snapshot\"},\"Snapshot\"),Object(i.b)(\"p\",null,\"When you submit your code to run in Azure ML, a \",Object(i.b)(\"em\",{parentName:\"p\"},\"snapshot\"),\" is taken. This is a copy of the exact\\ncode that ran. Think of this as version control for your experiments. Want to reproduce the\\nresults from that experiment 2-months ago even though you've iterated on the model and the\\ntraining script in the meantime? No problem, snapshot has you covered!\"),Object(i.b)(\"p\",null,\"You have total control of what goes into the snapshot with the \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\".amlignore\"),\" file. This plays\\nthe same role as a \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\".gitignore\"),\" so you can efficiently manage what to include in the snapshot.\"),Object(i.b)(\"h3\",{id:\"metrics\"},\"Metrics\"),Object(i.b)(\"p\",null,\"As you run experiments, you track metrics - from validation loss through to GPU load. Analysing these metrics is essential to determining your best model. With Run History, these metrics are stored for all your runs.\"))}l.isMDXComponent=!0}}]);","name":"5a3ba28c.94187e77.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[18],{\n\n/***/ 106:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export MDXContext */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MDXProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return createElement; });\n/* unused harmony export useMDXComponents */\n/* unused harmony export withMDXComponents */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === 'function';\n};\n\nvar MDXContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = react__WEBPACK_IMPORTED_MODULE_0___default.a.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = 'mdxType';\nvar DEFAULTS = {\n  inlineCode: 'code',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components[\"\".concat(parentName, \".\").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = 'MDXCreateElement';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === 'string' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, createElementArgArray);\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, args);\n}\n\n\n\n\n/***/ }),\n\n/***/ 146:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"assets/images/logging-metrics-a151a23cc2167f2b40ef5d4ee5e86b01.png\");\n\n/***/ }),\n\n/***/ 73:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frontMatter\", function() { return frontMatter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"metadata\", function() { return metadata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rightToc\", function() { return rightToc; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MDXContent; });\n/* harmony import */ var _home_amin_repos_AzureML_CheatSheet_azureml_cheatsheet_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n/* harmony import */ var _home_amin_repos_AzureML_CheatSheet_azureml_cheatsheet_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(106);\nvar frontMatter={title:'Run History'};var metadata={\"unversionedId\":\"run-history\",\"id\":\"version-1.15.0/run-history\",\"isDocsHomePage\":false,\"title\":\"Run History\",\"description\":\"Azure ML can supercharge your ML workloads in (at least!) two ways:\",\"source\":\"@site/versioned_docs/version-1.15.0/run-history.md\",\"slug\":\"/run-history\",\"permalink\":\"/docs/run-history\",\"editUrl\":\"https://github.com/facebook/docusaurus/edit/master/website/versioned_docs/version-1.15.0/run-history.md\",\"version\":\"1.15.0\"};/* @jsx mdx */var rightToc=[{value:'Experiments and Runs',id:'experiments-and-runs',children:[]},{value:'Snapshot',id:'snapshot',children:[]},{value:'Metrics',id:'metrics',children:[]}];var layoutProps={rightToc:rightToc};var MDXLayout=\"wrapper\";function MDXContent(_ref){var components=_ref.components,props=Object(_home_amin_repos_AzureML_CheatSheet_azureml_cheatsheet_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(_ref,[\"components\"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(MDXLayout,Object(_home_amin_repos_AzureML_CheatSheet_azureml_cheatsheet_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({},layoutProps,props,{components:components,mdxType:\"MDXLayout\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Azure ML can supercharge your ML workloads in (at least!) two ways:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"AML Compute: Providing powerful compute resoures to train larger models\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"li\",{parentName:\"ul\"},\"Run history: Best-in-class lineage and reproducability\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"In this article we focus on Run History - and why you need it in your life!\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"As teams progress to running dozens, and eventually hundreds of experiments, having\\nsome way to organize them is essential. Run History is a service that provides a number\\nfeatures that quickly become essential to your ML-model builders:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"experiments-and-runs\"},\"Experiments and Runs\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"When you are running dozens of experiments in multiple different projects, having a clear\\nway to organize and search though the results is key. Azure ML provides two concepts to help\\nwith this: \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"inlineCode\",{parentName:\"p\"},\"Run\"),\"s and \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"inlineCode\",{parentName:\"p\"},\"Experiment\"),\"s.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h4\",{\"id\":\"runs\"},\"Runs\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"A run is a single execution of your code - usually a training script. The run has a life-cycle:\\nthe code is prepared to be submited to Azure ML (e.g. via a ScriptRunConfig), then the code is\\nsubmitted\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"Once the code is submitted to Azure ML (for example, via a \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"inlineCode\",{parentName:\"p\"},\"ScriptRunConfig\"),\") a \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"inlineCode\",{parentName:\"p\"},\"Run\"),\" object is\\ncreated. This compute target is prepared (nodes are provisioned, containers hosting your Python\\nenvironment are fired up), the entry point script is called (\",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"inlineCode\",{parentName:\"p\"},\"$ python run.py [args]\"),\") and logs\\nstart being generated:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"code\",Object(_home_amin_repos_AzureML_CheatSheet_azureml_cheatsheet_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({parentName:\"pre\"},{\"className\":\"language-console\"}),\"Files already downloaded and verified\\nepoch=1, batch= 2000: loss 2.19\\nepoch=1, batch= 4000: loss 1.82\\nepoch=1, batch= 6000: loss 1.66\\n...\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"You may log metrics to Azure ML with \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"inlineCode\",{parentName:\"p\"},\"run.log('<metric_name>', metric_value)\"),\" and monitor them in the studio:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"img\",{src:__webpack_require__(146).default})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"The training concludes, usually some model files are saved, and the nodes are\\nreleased.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"But the story doesn't end there. The run persists even after the nodes are returned\\nto Azure. You can always return, either in code or via the studio, to see a history\\nof your runs, all their outputs and metrics, and the exact code that was used to generate them.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h4\",{\"id\":\"experiments\"},\"Experiments\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"An Experiment is a collection of runs. All runs belongs to an Experiment. Usually\\nan Experiment is tied to a specific work item, for example, \\\"Finetune Bert-Large\\\",\\nand will posses a number of runs as you iterate toward this goal.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"snapshot\"},\"Snapshot\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"When you submit your code to run in Azure ML, a \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"em\",{parentName:\"p\"},\"snapshot\"),\" is taken. This is a copy of the exact\\ncode that ran. Think of this as version control for your experiments. Want to reproduce the\\nresults from that experiment 2-months ago even though you've iterated on the model and the\\ntraining script in the meantime? No problem, snapshot has you covered!\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"You have total control of what goes into the snapshot with the \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"inlineCode\",{parentName:\"p\"},\".amlignore\"),\" file. This plays\\nthe same role as a \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"inlineCode\",{parentName:\"p\"},\".gitignore\"),\" so you can efficiently manage what to include in the snapshot.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"h3\",{\"id\":\"metrics\"},\"Metrics\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[/* mdx */ \"b\"])(\"p\",null,\"As you run experiments, you track metrics - from validation loss through to GPU load. Analysing these metrics is essential to determining your best model. With Run History, these metrics are stored for all your runs.\"));};MDXContent.isMDXComponent=true;\n\n/***/ })\n\n}]);","inputSourceMap":null}