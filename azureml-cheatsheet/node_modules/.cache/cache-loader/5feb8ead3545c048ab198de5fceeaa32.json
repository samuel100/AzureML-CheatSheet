{"remainingRequest":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/babel-loader/lib/index.js??ref--11-1!/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/docs/docker-build.md","dependencies":[{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/docs/docker-build.md","mtime":1602306259850},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-docker-build-md-336.json","mtime":1602306873110},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/cache-loader/dist/cjs.js","mtime":1602134439496},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/babel-loader/lib/index.js","mtime":1602134439180},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1602134465694},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1602134465218}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}