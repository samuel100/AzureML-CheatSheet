{"remainingRequest":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/babel-loader/lib/index.js??ref--11-1!/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/versioned_docs/version-1.15.0/docker-build.md","dependencies":[{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/versioned_docs/version-1.15.0/docker-build.md","mtime":1602306269270},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-1-15-0-docker-build-md-819.json","mtime":1602306873120},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/cache-loader/dist/cjs.js","mtime":1602134439496},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/babel-loader/lib/index.js","mtime":1602134439180},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1602134465694},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1602134465218}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}