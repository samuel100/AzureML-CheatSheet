{"remainingRequest":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/babel-loader/lib/index.js??ref--11-1!/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/versioned_docs/version-1.15.0/vs-code-snippets/snippets.md","dependencies":[{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/versioned_docs/version-1.15.0/vs-code-snippets/snippets.md","mtime":1602306269280},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-1-15-0-vs-code-snippets-snippets-md-9e1.json","mtime":1602306873120},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/cache-loader/dist/cjs.js","mtime":1602134439496},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/babel-loader/lib/index.js","mtime":1602134439180},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1602134465694},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1602134465218}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL2hvbWUvYW1pbi9yZXBvcy9BenVyZU1MLUNoZWF0U2hlZXQvYXp1cmVtbC1jaGVhdHNoZWV0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCBjb25zdCBmcm9udE1hdHRlcj17dGl0bGU6J1ZTIENvZGUgU25pcHBldHMnfTtleHBvcnQgY29uc3QgbWV0YWRhdGE9eyJ1bnZlcnNpb25lZElkIjoidnMtY29kZS1zbmlwcGV0cy9zbmlwcGV0cyIsImlkIjoidmVyc2lvbi0xLjE1LjAvdnMtY29kZS1zbmlwcGV0cy9zbmlwcGV0cyIsImlzRG9jc0hvbWVQYWdlIjpmYWxzZSwidGl0bGUiOiJWUyBDb2RlIFNuaXBwZXRzIiwiZGVzY3JpcHRpb24iOiJXZSBoYXZlIGNvbXBpbGVkIGEgY29sbGVjdGlvbiBvZiB1c2VmdWwgdGVtcGxhdGVzIGluIHRoZSBmb3JtIG9mIiwic291cmNlIjoiQHNpdGUvdmVyc2lvbmVkX2RvY3MvdmVyc2lvbi0xLjE1LjAvdnMtY29kZS1zbmlwcGV0cy9zbmlwcGV0cy5tZCIsInNsdWciOiIvdnMtY29kZS1zbmlwcGV0cy9zbmlwcGV0cyIsInBlcm1hbGluayI6Ii9henVyZW1sLWNoZWF0c2hlZXQvZG9jcy92cy1jb2RlLXNuaXBwZXRzL3NuaXBwZXRzIiwiZWRpdFVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9kb2N1c2F1cnVzL2VkaXQvbWFzdGVyL3dlYnNpdGUvdmVyc2lvbmVkX2RvY3MvdmVyc2lvbi0xLjE1LjAvdnMtY29kZS1zbmlwcGV0cy9zbmlwcGV0cy5tZCIsInZlcnNpb24iOiIxLjE1LjAifTsvKiBAanN4IG1keCAqL2V4cG9ydCBjb25zdCByaWdodFRvYz1be3ZhbHVlOidCYXNpYyBjb3JlIGltcG9ydHMnLGlkOidiYXNpYy1jb3JlLWltcG9ydHMnLGNoaWxkcmVuOltdfSx7dmFsdWU6J1BpcGVsaW5lIGltcG9ydHMnLGlkOidwaXBlbGluZS1pbXBvcnRzJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidDcmVhdGUgQU1MIFdvcmtzcGFjZSBmcm9tIGNvbmZpZycsaWQ6J2NyZWF0ZS1hbWwtd29ya3NwYWNlLWZyb20tY29uZmlnJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidDcmVhdGUgQU1MIFdvcmtzcGFjZSBmcm9tIGNvbmZpZyBhbmQgYXV0aCcsaWQ6J2NyZWF0ZS1hbWwtd29ya3NwYWNlLWZyb20tY29uZmlnLWFuZC1hdXRoJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidSZWdpc3RlciBBenVyZSBCbG9iIENvbnRhaW5lciBGcm9tIFNBUycsaWQ6J3JlZ2lzdGVyLWF6dXJlLWJsb2ItY29udGFpbmVyLWZyb20tc2FzJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidDcmVhdGUgQ29tcHV0ZSBDbHVzdGVyIHdpdGggU1NIJyxpZDonY3JlYXRlLWNvbXB1dGUtY2x1c3Rlci13aXRoLXNzaCcsY2hpbGRyZW46W119XTtjb25zdCBsYXlvdXRQcm9wcz17cmlnaHRUb2N9O2NvbnN0IE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudCh7Y29tcG9uZW50cywuLi5wcm9wc30pe3JldHVybiBtZHgoTURYTGF5b3V0LF9leHRlbmRzKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgicCIsbnVsbCxgV2UgaGF2ZSBjb21waWxlZCBhIGNvbGxlY3Rpb24gb2YgdXNlZnVsIHRlbXBsYXRlcyBpbiB0aGUgZm9ybSBvZgpgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS9kb2NzL2VkaXRvci91c2VyZGVmaW5lZHNuaXBwZXRzIn0pLGBWUyBjb2RlIHNuaXBwZXRzYCksYC5gKSxtZHgoInAiLG51bGwsbWR4KCJpbWciLHthbHQ6IlZTIENvZGUgU25pcHBldHMiLHNyYzpyZXF1aXJlKCIhdXJsLWxvYWRlcj9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtoYXNoXS5bZXh0XSZmYWxsYmFjaz1maWxlLWxvYWRlciEuL3ZzLWNvZGUtc25pcHBldHMtZGVtby5naWYiKS5kZWZhdWx0fSkpLG1keCgicCIsbnVsbCxgVG8gYWRkIHRoZXNlIHNuaXBwZXRzIHRvIHlvdXIgVlMgQ29kZTogYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYGN0cmwrc2hpZnQrcGApLGAgPiBUeXBlICJDb25maWd1cmUgdXNlcgpzbmlwcGV0cyIgPiBTZWxlY3QgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYHB5dGhvbi5qc29uYCksYC4gQWxsIG9mIHRoZXNlIHNuaXBwZXRzIGFyZSBhdmFpbGFibGUgaGVyZToKYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL2FtaW5zYWllZC9BenVyZU1MLUNoZWF0U2hlZXQvYmxvYi9tYXN0ZXIvdnMtY29kZS1zbmlwcGV0cy9weXRob24uanNvbiJ9KSxgcHl0aG9uLmpzb25gKSksbWR4KCJoMiIseyJpZCI6ImJhc2ljLWNvcmUtaW1wb3J0cyJ9LGBCYXNpYyBjb3JlIGltcG9ydHNgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWpzb24ifSksYCJCYXNpYyBjb3JlIGltcG9ydHMiOiB7CiAgICAgICAgInByZWZpeCI6ICJ3b3Jrc3BhY2UtaW1wb3J0cy1jcmVhdGlvbiIsCiAgICAgICAgImJvZHkiOiBbCiAgICAgICAgICAgICJmcm9tIGF6dXJlbWwuY29yZSBpbXBvcnQgV29ya3NwYWNlLCBFeHBlcmltZW50LCBSdW4sIFJ1bkNvbmZpZ3VyYXRpb24sIENvbXB1dGVUYXJnZXQkMSIsCiAgICAgICAgICAgICIkMCIKICAgICAgICBdLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJJbXBvcnQgZXNzZW50aWFsIHBhY2thZ2VzIgogICAgfQpgKSksbWR4KCJoMiIseyJpZCI6InBpcGVsaW5lLWltcG9ydHMifSxgUGlwZWxpbmUgaW1wb3J0c2ApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtanNvbiJ9KSxgIlBpcGVsaW5lIEltcG9ydHMiOiB7CiAgICAgICAgInByZWZpeCI6ICJwaXBlbGluZS1pbXBvcnRzIiwKICAgICAgICAiYm9keSI6IFsKICAgICAgICAgICAgImZyb20gYXp1cmVtbC5waXBlbGluZS5jb3JlIGltcG9ydCBQaXBlbGluZSwgUGlwZWxpbmVEYXRhLCBQaXBlbGluZVBhcmFtZXRlciIsCiAgICAgICAgICAgICJmcm9tIGF6dXJlbWwucGlwZWxpbmUuc3RlcHMgaW1wb3J0IFB5dGhvblNjcmlwdFN0ZXAkMSIsCiAgICAgICAgICAgICIkMCIKICAgICAgICBdLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJCYXNpYyBpbXBvcnRzIGZvciBwaXBlbGluZSIKICAgIH0KYCkpLG1keCgiaDIiLHsiaWQiOiJjcmVhdGUtYW1sLXdvcmtzcGFjZS1mcm9tLWNvbmZpZyJ9LGBDcmVhdGUgQU1MIFdvcmtzcGFjZSBmcm9tIGNvbmZpZ2ApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtanNvbiJ9KSxgIkNyZWF0ZSBBTUwgV29ya3NwYWNlIGZyb20gY29uZmlnIjogewogICAgICAgICJwcmVmaXgiOiBbIndvcmtzcGFjZS1xdWljayIsImZyb21jb25maWciLCJmcm9tLWNvbmZpZyJdLAogICAgICAgICJib2R5IjogWwogICAgICAgICAgICAid3MgPSBXb3Jrc3BhY2UuZnJvbV9jb25maWcoKSIsCiAgICAgICAgICAgICIkMCIKICAgICAgICBdLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJEZWZhdWx0IHdvcmtzcGFjZSBjcmVhdGlvbiIKICAgIH0KYCkpLG1keCgiaDIiLHsiaWQiOiJjcmVhdGUtYW1sLXdvcmtzcGFjZS1mcm9tLWNvbmZpZy1hbmQtYXV0aCJ9LGBDcmVhdGUgQU1MIFdvcmtzcGFjZSBmcm9tIGNvbmZpZyBhbmQgYXV0aGApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtanNvbiJ9KSxgIkNyZWF0ZSBBTUwgV29ya3NwYWNlIGZyb20gY29uZmlnIGFuZCBhdXRoIjogewogICAgICAgICJwcmVmaXgiOiAid29ya3NwYWNlLWZyb20tY29uZmlnLWF1dGgiLAogICAgICAgICJib2R5IjogWwogICAgICAgICAgICAiZnJvbSBhenVyZW1sLmNvcmUuYXV0aGVudGljYXRpb24gaW1wb3J0IEludGVyYWN0aXZlTG9naW5BdXRoZW50aWNhdGlvbiIsCiAgICAgICAgICAgICJjb25maWcgPSB7J3N1YnNjcmlwdGlvbl9pZCc6JyQxJywiLAogICAgICAgICAgICAiJ3Jlc291cmNlX2dyb3VwJzonJDInLCIsCiAgICAgICAgICAgICInd29ya3NwYWNlX25hbWUnIDonJDMnfSIsCiAgICAgICAgICAgICJhdXRoID0gSW50ZXJhY3RpdmVMb2dpbkF1dGhlbnRpY2F0aW9uKCkiLAogICAgICAgICAgICAid3MgPSBXb3Jrc3BhY2UoKipjb25maWcsYXV0aCA9IGF1dGgpIiwKICAgICAgICAgICAgIiQwIgogICAgICAgIF0sCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkNyZWF0ZSB3b3Jrc3BhY2UgZnJvbSBjb25maWcgYW5kIGF1dGgiCiAgICB9CmApKSxtZHgoImgyIix7ImlkIjoicmVnaXN0ZXItYXp1cmUtYmxvYi1jb250YWluZXItZnJvbS1zYXMifSxgUmVnaXN0ZXIgQXp1cmUgQmxvYiBDb250YWluZXIgRnJvbSBTQVNgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWpzb24ifSksYCJSZWdpc3RlciBBenVyZSBCbG9iIENvbnRhaW5lciBGcm9tIFNBUyI6IHsKICAgICJwcmVmaXgiOiBbImRhdGFzdG9yZS1yZWdpc3Rlci1ibG9iLXNhcyIsInJlZy1ibG9iLXNhcyJdLAogICAgImJvZHkiOiBbCiAgICAgICAgImRzID0gRGF0YXN0b3JlLnJlZ2lzdGVyX2F6dXJlX2Jsb2JfY29udGFpbmVyKCIKICAgICAgICAiICAgIHdvcmtzcGFjZT0nJDEnLCIKICAgICAgICAiICAgIGRhdGFzdG9yZV9uYW1lPSckMicsIiwKICAgICAgICAiICAgIGNvbnRhaW5lcl9uYW1lPSckMycsIiwKICAgICAgICAiICAgIGFjY291bnRfbmFtZT0nJDQnLCIsCiAgICAgICAgIiAgICBzYXNfdG9rZW49JyQ1JywiLAogICAgICAgICIpIgogICAgICAgICIkMCIKICAgIF0sCiAgICAiZGVzY3JpcHRpb24iOiAiUmVnaXN0ZXIgQXp1cmUgQmxvYiBjb250YWluZXIgdG8gd29ya3NwYWNlIHZpYSBTQVMiCn0KYCkpLG1keCgiaDIiLHsiaWQiOiJjcmVhdGUtY29tcHV0ZS1jbHVzdGVyLXdpdGgtc3NoIn0sYENyZWF0ZSBDb21wdXRlIENsdXN0ZXIgd2l0aCBTU0hgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWpzb24ifSksYCJDcmVhdGUgQ29tcHV0ZSBDbHVzdGVyIHdpdGggU1NIIjogewogICAgICAgICJwcmVmaXgiOiBbImNyZWF0ZS1jb21wdXRlLWNsdXN0ZXItc3NoIl0sCiAgICAgICAgImJvZHkiOiBbCiAgICAgICAgICAgICJmcm9tIGF6dXJlbWwuY29yZS5jb21wdXRlIGltcG9ydCBBbWxDb21wdXRlIiwKICAgICAgICAgICAgImZyb20gYXp1cmVtbC5jb3JlLmNvbXB1dGVfdGFyZ2V0IGltcG9ydCBDb21wdXRlVGFyZ2V0RXhjZXB0aW9uIiwKICAgICAgICAgICAgInNzaF9wdWJsaWNfa2V5ID0gJyQxJyIsCiAgICAgICAgICAgICJjb21wdXRlX2NvbmZpZyA9IEFtbENvbXB1dGUucHJvdmlzaW9uaW5nX2NvbmZpZ3VyYXRpb24odm1fc2l6ZT0nJDQnLG1pbl9ub2Rlcz0kNSwgbWF4X25vZGVzPSQ2LGFkbWluX3VzZXJuYW1lPSckNycsYWRtaW5fdXNlcl9zc2hfa2V5PXNzaF9wdWJsaWNfa2V5LHZtX3ByaW9yaXR5PSdcJHs4fGxvd3ByaW9yaXR5LGRlZGljYXRlZHx9JyxyZW1vdGVfbG9naW5fcG9ydF9wdWJsaWNfYWNjZXNzPSdFbmFibGVkJykiLAogICAgICAgICAgICAiY2x1c3RlciQwID0gQ29tcHV0ZVRhcmdldC5jcmVhdGUod29ya3NwYWNlPSQ5LCBuYW1lPSckMTAnLCBjb21wdXRlX2NvbmZpZykiCiAgICAgICAgXSwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiQ3JlYXRlIGNvbXB1dGUgY2x1c3RlciB3aXRoIFNTSCBlbmFibGVkIgogICAgfQpgKSkpO307TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},null]}