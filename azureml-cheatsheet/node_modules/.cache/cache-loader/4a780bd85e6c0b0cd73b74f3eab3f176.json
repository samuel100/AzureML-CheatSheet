{"remainingRequest":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/babel-loader/lib/index.js??ref--11-1!/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/versioned_docs/version-1.15.0/vs-code-snippets/snippets.md","dependencies":[{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/versioned_docs/version-1.15.0/vs-code-snippets/snippets.md","mtime":1602306269280},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/.docusaurus/docusaurus-plugin-content-docs/default/site-versioned-docs-version-1-15-0-vs-code-snippets-snippets-md-9e1.json","mtime":1602306873120},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/cache-loader/dist/cjs.js","mtime":1602134439496},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/babel-loader/lib/index.js","mtime":1602134439180},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1602134465694},{"path":"/home/amin/repos/AzureML-CheatSheet/azureml-cheatsheet/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1602134465218}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL2hvbWUvYW1pbi9yZXBvcy9BenVyZU1MLUNoZWF0U2hlZXQvYXp1cmVtbC1jaGVhdHNoZWV0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSIvaG9tZS9hbWluL3JlcG9zL0F6dXJlTUwtQ2hlYXRTaGVldC9henVyZW1sLWNoZWF0c2hlZXQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IHZhciBmcm9udE1hdHRlcj17dGl0bGU6J1ZTIENvZGUgU25pcHBldHMnfTtleHBvcnQgdmFyIG1ldGFkYXRhPXsidW52ZXJzaW9uZWRJZCI6InZzLWNvZGUtc25pcHBldHMvc25pcHBldHMiLCJpZCI6InZlcnNpb24tMS4xNS4wL3ZzLWNvZGUtc25pcHBldHMvc25pcHBldHMiLCJpc0RvY3NIb21lUGFnZSI6ZmFsc2UsInRpdGxlIjoiVlMgQ29kZSBTbmlwcGV0cyIsImRlc2NyaXB0aW9uIjoiV2UgaGF2ZSBjb21waWxlZCBhIGNvbGxlY3Rpb24gb2YgdXNlZnVsIHRlbXBsYXRlcyBpbiB0aGUgZm9ybSBvZiIsInNvdXJjZSI6IkBzaXRlL3ZlcnNpb25lZF9kb2NzL3ZlcnNpb24tMS4xNS4wL3ZzLWNvZGUtc25pcHBldHMvc25pcHBldHMubWQiLCJzbHVnIjoiL3ZzLWNvZGUtc25pcHBldHMvc25pcHBldHMiLCJwZXJtYWxpbmsiOiIvYXp1cmVtbC1jaGVhdHNoZWV0L2RvY3MvdnMtY29kZS1zbmlwcGV0cy9zbmlwcGV0cyIsImVkaXRVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZG9jdXNhdXJ1cy9lZGl0L21hc3Rlci93ZWJzaXRlL3ZlcnNpb25lZF9kb2NzL3ZlcnNpb24tMS4xNS4wL3ZzLWNvZGUtc25pcHBldHMvc25pcHBldHMubWQiLCJ2ZXJzaW9uIjoiMS4xNS4wIn07LyogQGpzeCBtZHggKi9leHBvcnQgdmFyIHJpZ2h0VG9jPVt7dmFsdWU6J0Jhc2ljIGNvcmUgaW1wb3J0cycsaWQ6J2Jhc2ljLWNvcmUtaW1wb3J0cycsY2hpbGRyZW46W119LHt2YWx1ZTonUGlwZWxpbmUgaW1wb3J0cycsaWQ6J3BpcGVsaW5lLWltcG9ydHMnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0NyZWF0ZSBBTUwgV29ya3NwYWNlIGZyb20gY29uZmlnJyxpZDonY3JlYXRlLWFtbC13b3Jrc3BhY2UtZnJvbS1jb25maWcnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0NyZWF0ZSBBTUwgV29ya3NwYWNlIGZyb20gY29uZmlnIGFuZCBhdXRoJyxpZDonY3JlYXRlLWFtbC13b3Jrc3BhY2UtZnJvbS1jb25maWctYW5kLWF1dGgnLGNoaWxkcmVuOltdfSx7dmFsdWU6J1JlZ2lzdGVyIEF6dXJlIEJsb2IgQ29udGFpbmVyIEZyb20gU0FTJyxpZDoncmVnaXN0ZXItYXp1cmUtYmxvYi1jb250YWluZXItZnJvbS1zYXMnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0NyZWF0ZSBDb21wdXRlIENsdXN0ZXIgd2l0aCBTU0gnLGlkOidjcmVhdGUtY29tcHV0ZS1jbHVzdGVyLXdpdGgtc3NoJyxjaGlsZHJlbjpbXX1dO3ZhciBsYXlvdXRQcm9wcz17cmlnaHRUb2M6cmlnaHRUb2N9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsWyJjb21wb25lbnRzIl0pO3JldHVybiBtZHgoTURYTGF5b3V0LF9leHRlbmRzKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgicCIsbnVsbCwiV2UgaGF2ZSBjb21waWxlZCBhIGNvbGxlY3Rpb24gb2YgdXNlZnVsIHRlbXBsYXRlcyBpbiB0aGUgZm9ybSBvZlxuIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9lZGl0b3IvdXNlcmRlZmluZWRzbmlwcGV0cyJ9KSwiVlMgY29kZSBzbmlwcGV0cyIpLCIuIiksbWR4KCJwIixudWxsLG1keCgiaW1nIix7YWx0OiJWUyBDb2RlIFNuaXBwZXRzIixzcmM6cmVxdWlyZSgiIXVybC1sb2FkZXI/bGltaXQ9MTAwMDAmbmFtZT1hc3NldHMvaW1hZ2VzL1tuYW1lXS1baGFzaF0uW2V4dF0mZmFsbGJhY2s9ZmlsZS1sb2FkZXIhLi92cy1jb2RlLXNuaXBwZXRzLWRlbW8uZ2lmIikuZGVmYXVsdH0pKSxtZHgoInAiLG51bGwsIlRvIGFkZCB0aGVzZSBzbmlwcGV0cyB0byB5b3VyIFZTIENvZGU6ICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJjdHJsK3NoaWZ0K3AiKSwiID4gVHlwZSBcIkNvbmZpZ3VyZSB1c2VyXG5zbmlwcGV0c1wiID4gU2VsZWN0ICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJweXRob24uanNvbiIpLCIuIEFsbCBvZiB0aGVzZSBzbmlwcGV0cyBhcmUgYXZhaWxhYmxlIGhlcmU6XG4iLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL2dpdGh1Yi5jb20vYW1pbnNhaWVkL0F6dXJlTUwtQ2hlYXRTaGVldC9ibG9iL21hc3Rlci92cy1jb2RlLXNuaXBwZXRzL3B5dGhvbi5qc29uIn0pLCJweXRob24uanNvbiIpKSxtZHgoImgyIix7ImlkIjoiYmFzaWMtY29yZS1pbXBvcnRzIn0sIkJhc2ljIGNvcmUgaW1wb3J0cyIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtanNvbiJ9KSwiXCJCYXNpYyBjb3JlIGltcG9ydHNcIjoge1xuICAgICAgICBcInByZWZpeFwiOiBcIndvcmtzcGFjZS1pbXBvcnRzLWNyZWF0aW9uXCIsXG4gICAgICAgIFwiYm9keVwiOiBbXG4gICAgICAgICAgICBcImZyb20gYXp1cmVtbC5jb3JlIGltcG9ydCBXb3Jrc3BhY2UsIEV4cGVyaW1lbnQsIFJ1biwgUnVuQ29uZmlndXJhdGlvbiwgQ29tcHV0ZVRhcmdldCQxXCIsXG4gICAgICAgICAgICBcIiQwXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkltcG9ydCBlc3NlbnRpYWwgcGFja2FnZXNcIlxuICAgIH1cbiIpKSxtZHgoImgyIix7ImlkIjoicGlwZWxpbmUtaW1wb3J0cyJ9LCJQaXBlbGluZSBpbXBvcnRzIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1qc29uIn0pLCJcIlBpcGVsaW5lIEltcG9ydHNcIjoge1xuICAgICAgICBcInByZWZpeFwiOiBcInBpcGVsaW5lLWltcG9ydHNcIixcbiAgICAgICAgXCJib2R5XCI6IFtcbiAgICAgICAgICAgIFwiZnJvbSBhenVyZW1sLnBpcGVsaW5lLmNvcmUgaW1wb3J0IFBpcGVsaW5lLCBQaXBlbGluZURhdGEsIFBpcGVsaW5lUGFyYW1ldGVyXCIsXG4gICAgICAgICAgICBcImZyb20gYXp1cmVtbC5waXBlbGluZS5zdGVwcyBpbXBvcnQgUHl0aG9uU2NyaXB0U3RlcCQxXCIsXG4gICAgICAgICAgICBcIiQwXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJhc2ljIGltcG9ydHMgZm9yIHBpcGVsaW5lXCJcbiAgICB9XG4iKSksbWR4KCJoMiIseyJpZCI6ImNyZWF0ZS1hbWwtd29ya3NwYWNlLWZyb20tY29uZmlnIn0sIkNyZWF0ZSBBTUwgV29ya3NwYWNlIGZyb20gY29uZmlnIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1qc29uIn0pLCJcIkNyZWF0ZSBBTUwgV29ya3NwYWNlIGZyb20gY29uZmlnXCI6IHtcbiAgICAgICAgXCJwcmVmaXhcIjogW1wid29ya3NwYWNlLXF1aWNrXCIsXCJmcm9tY29uZmlnXCIsXCJmcm9tLWNvbmZpZ1wiXSxcbiAgICAgICAgXCJib2R5XCI6IFtcbiAgICAgICAgICAgIFwid3MgPSBXb3Jrc3BhY2UuZnJvbV9jb25maWcoKVwiLFxuICAgICAgICAgICAgXCIkMFwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJEZWZhdWx0IHdvcmtzcGFjZSBjcmVhdGlvblwiXG4gICAgfVxuIikpLG1keCgiaDIiLHsiaWQiOiJjcmVhdGUtYW1sLXdvcmtzcGFjZS1mcm9tLWNvbmZpZy1hbmQtYXV0aCJ9LCJDcmVhdGUgQU1MIFdvcmtzcGFjZSBmcm9tIGNvbmZpZyBhbmQgYXV0aCIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtanNvbiJ9KSwiXCJDcmVhdGUgQU1MIFdvcmtzcGFjZSBmcm9tIGNvbmZpZyBhbmQgYXV0aFwiOiB7XG4gICAgICAgIFwicHJlZml4XCI6IFwid29ya3NwYWNlLWZyb20tY29uZmlnLWF1dGhcIixcbiAgICAgICAgXCJib2R5XCI6IFtcbiAgICAgICAgICAgIFwiZnJvbSBhenVyZW1sLmNvcmUuYXV0aGVudGljYXRpb24gaW1wb3J0IEludGVyYWN0aXZlTG9naW5BdXRoZW50aWNhdGlvblwiLFxuICAgICAgICAgICAgXCJjb25maWcgPSB7J3N1YnNjcmlwdGlvbl9pZCc6JyQxJyxcIixcbiAgICAgICAgICAgIFwiJ3Jlc291cmNlX2dyb3VwJzonJDInLFwiLFxuICAgICAgICAgICAgXCInd29ya3NwYWNlX25hbWUnIDonJDMnfVwiLFxuICAgICAgICAgICAgXCJhdXRoID0gSW50ZXJhY3RpdmVMb2dpbkF1dGhlbnRpY2F0aW9uKClcIixcbiAgICAgICAgICAgIFwid3MgPSBXb3Jrc3BhY2UoKipjb25maWcsYXV0aCA9IGF1dGgpXCIsXG4gICAgICAgICAgICBcIiQwXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkNyZWF0ZSB3b3Jrc3BhY2UgZnJvbSBjb25maWcgYW5kIGF1dGhcIlxuICAgIH1cbiIpKSxtZHgoImgyIix7ImlkIjoicmVnaXN0ZXItYXp1cmUtYmxvYi1jb250YWluZXItZnJvbS1zYXMifSwiUmVnaXN0ZXIgQXp1cmUgQmxvYiBDb250YWluZXIgRnJvbSBTQVMiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLWpzb24ifSksIlwiUmVnaXN0ZXIgQXp1cmUgQmxvYiBDb250YWluZXIgRnJvbSBTQVNcIjoge1xuICAgIFwicHJlZml4XCI6IFtcImRhdGFzdG9yZS1yZWdpc3Rlci1ibG9iLXNhc1wiLFwicmVnLWJsb2Itc2FzXCJdLFxuICAgIFwiYm9keVwiOiBbXG4gICAgICAgIFwiZHMgPSBEYXRhc3RvcmUucmVnaXN0ZXJfYXp1cmVfYmxvYl9jb250YWluZXIoXCJcbiAgICAgICAgXCIgICAgd29ya3NwYWNlPSckMScsXCJcbiAgICAgICAgXCIgICAgZGF0YXN0b3JlX25hbWU9JyQyJyxcIixcbiAgICAgICAgXCIgICAgY29udGFpbmVyX25hbWU9JyQzJyxcIixcbiAgICAgICAgXCIgICAgYWNjb3VudF9uYW1lPSckNCcsXCIsXG4gICAgICAgIFwiICAgIHNhc190b2tlbj0nJDUnLFwiLFxuICAgICAgICBcIilcIlxuICAgICAgICBcIiQwXCJcbiAgICBdLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJSZWdpc3RlciBBenVyZSBCbG9iIGNvbnRhaW5lciB0byB3b3Jrc3BhY2UgdmlhIFNBU1wiXG59XG4iKSksbWR4KCJoMiIseyJpZCI6ImNyZWF0ZS1jb21wdXRlLWNsdXN0ZXItd2l0aC1zc2gifSwiQ3JlYXRlIENvbXB1dGUgQ2x1c3RlciB3aXRoIFNTSCIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtanNvbiJ9KSwiXCJDcmVhdGUgQ29tcHV0ZSBDbHVzdGVyIHdpdGggU1NIXCI6IHtcbiAgICAgICAgXCJwcmVmaXhcIjogW1wiY3JlYXRlLWNvbXB1dGUtY2x1c3Rlci1zc2hcIl0sXG4gICAgICAgIFwiYm9keVwiOiBbXG4gICAgICAgICAgICBcImZyb20gYXp1cmVtbC5jb3JlLmNvbXB1dGUgaW1wb3J0IEFtbENvbXB1dGVcIixcbiAgICAgICAgICAgIFwiZnJvbSBhenVyZW1sLmNvcmUuY29tcHV0ZV90YXJnZXQgaW1wb3J0IENvbXB1dGVUYXJnZXRFeGNlcHRpb25cIixcbiAgICAgICAgICAgIFwic3NoX3B1YmxpY19rZXkgPSAnJDEnXCIsXG4gICAgICAgICAgICBcImNvbXB1dGVfY29uZmlnID0gQW1sQ29tcHV0ZS5wcm92aXNpb25pbmdfY29uZmlndXJhdGlvbih2bV9zaXplPSckNCcsbWluX25vZGVzPSQ1LCBtYXhfbm9kZXM9JDYsYWRtaW5fdXNlcm5hbWU9JyQ3JyxhZG1pbl91c2VyX3NzaF9rZXk9c3NoX3B1YmxpY19rZXksdm1fcHJpb3JpdHk9JyR7OHxsb3dwcmlvcml0eSxkZWRpY2F0ZWR8fScscmVtb3RlX2xvZ2luX3BvcnRfcHVibGljX2FjY2Vzcz0nRW5hYmxlZCcpXCIsXG4gICAgICAgICAgICBcImNsdXN0ZXIkMCA9IENvbXB1dGVUYXJnZXQuY3JlYXRlKHdvcmtzcGFjZT0kOSwgbmFtZT0nJDEwJywgY29tcHV0ZV9jb25maWcpXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkNyZWF0ZSBjb21wdXRlIGNsdXN0ZXIgd2l0aCBTU0ggZW5hYmxlZFwiXG4gICAgfVxuIikpKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}