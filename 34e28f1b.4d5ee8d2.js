(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{145:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return d}));var r=n(0),i=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=i.a.createContext({}),u=function(e){var t=i.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=u(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},g=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=u(n),g=r,d=l["".concat(c,".").concat(g)]||l[g]||m[g]||o;return n?i.a.createElement(d,a(a({ref:t},p),{},{components:n})):i.a.createElement(d,a({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=g;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:r,c[1]=a;for(var p=2;p<o;p++)c[p]=n[p];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},70:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return a})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(2),i=n(6),o=(n(0),n(145)),c={title:"Logging Metrics"},a={unversionedId:"logging",id:"version-1.15.0/logging",isDocsHomePage:!1,title:"Logging Metrics",description:"Logging metrics",source:"@site/versioned_docs/version-1.15.0/logging.md",slug:"/logging",permalink:"/AzureML-CheatSheet/docs/logging",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/versioned_docs/version-1.15.0/logging.md",version:"1.15.0",sidebar:"version-1.15.0/mainSidebar",previous:{title:"Running code in the cloud",permalink:"/AzureML-CheatSheet/docs/script-run-config"},next:{title:"Azure ML Docker Build",permalink:"/AzureML-CheatSheet/docs/docker-build"}},s=[{value:"Logging metrics",id:"logging-metrics",children:[]},{value:"Viewing metrics with the Python SDK",id:"viewing-metrics-with-the-python-sdk",children:[]}],p={rightToc:s};function u(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"logging-metrics"},"Logging metrics"),Object(o.b)("p",null,"To log metrics in your running script add the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Run\nrun = Run.get_context()\nrun.log('metric-name', metric_value)\n")),Object(o.b)("h3",{id:"viewing-metrics-with-the-python-sdk"},"Viewing metrics with the Python SDK"),Object(o.b)("p",null,"Viewing metrics in a run"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"metrics = run.get_metrics()\n# metrics is of type Dict[str, List[float]] mapping mertic names\n# to a list of the values for that metric in the given run.\n\nmetrics.get('metric-name')\n# list of metrics in the order they were recorded\n")),Object(o.b)("p",null,"To view all recorded values for a given metric ",Object(o.b)("inlineCode",{parentName:"p"},"my-metric")," in a\ngiven experiment ",Object(o.b)("inlineCode",{parentName:"p"},"my-experiment"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"experiments = ws.experiments\n# of type Dict[str, Experiment] mapping experiment names the\n# corresponding Experiment\n\nexp = experiments['my-experiment']\nfor run in exp.get_runs():\n    metrics = run.get_metrics()\n    \n    my_metric = metrics.get('my-metric')\n    if my_metric:\n        print(my_metric)\n")))}u.isMDXComponent=!0}}]);