{
    "Basic core imports": {
        "prefix": ["imports", "workspace-imports-creation"],
        "body": [
            "from azureml.core import Workspace, Experiment, Run, RunConfiguration, ComputeTarget, Environment, ScriptRunConfig$1",
            "$0"
        ],
        "description": "Import essential packages"
    },

    "Pipeline Imports": {
        "prefix": "pipeline-imports",
        "body": [
            "from azureml.pipeline.core import Pipeline, PipelineData, PipelineParameter",
            "from azureml.pipeline.steps import PythonScriptStep$1",
            "$0"
        ],
        "description": "Basic imports for pipeline"
    },

    "Create AML Workspace from config": {
        "prefix": ["workspace-quick","fromconfig","from-config"],
        "body": [
            "ws = Workspace.from_config()",
            "$0"
        ],
        "description": "Default workspace creation"
    },

    "Create AML Workspace from config and auth": {
        "prefix": "workspace-from-config-auth",
        "body": [
            "from azureml.core.authentication import InteractiveLoginAuthentication",
            "config = {'subscription_id':'$1',",
            "'resource_group':'$2',",
            "'workspace_name' :'$3'}",
            "auth = InteractiveLoginAuthentication()",
            "ws = Workspace(**config,auth = auth)",
            "$0"
        ],
        "description": "Create workspace from config and auth"
    },

    "Register Azure Blob Container From SAS": {
        "prefix": ["datastore-register-blob-sas","reg-blob-sas"],
        "body": [
            "ds = Datastore.register_azure_blob_container(",
            "    workspace='$1',",
            "    datastore_name='$2',",
            "    container_name='$3',",
            "    account_name='$4',",
            "    sas_token='$5',",
            ")",
            "$0"
        ],
        "description": "Register Azure Blob container to workspace via SAS"
    },

    "Create Compute Cluster with SSH": {
        "prefix": ["create-compute-cluster-ssh"],
        "body": [
            "from azureml.core.compute import AmlCompute",
            "from azureml.core.compute_target import ComputeTargetException",
            "ssh_public_key = '$1'",
            "compute_config = AmlCompute.provisioning_configuration(vm_size='$4',min_nodes=$5, max_nodes=$6,admin_username='$7',admin_user_ssh_key=ssh_public_key,vm_priority='${8|lowpriority,dedicated|}',remote_login_port_public_access='Enabled')",
            "cluster$0 = ComputeTarget.create(workspace=$9, name='$10', compute_config)"
        ],
        "description": "Create compute cluster with SSH enabled"
    },

    "AML Template Script Run Config": {
        "prefix": ["aml-template-script"],
        "body": [
            "from azureml.core import Workspace, Experiment, ScriptRunConfig",
            "",
            "# get workspace",
            "ws = Workspace.from_config()",
            "",
            "#  get/create experiment",
            "exp = Experiment(ws, '$1')",
            "",
            "# set up script run configuration",
            "config = ScriptRunConfig(",
            "    source_directory='.',",
            "    script='$2.py',",
            "    #arguments=['--meaning', 42],",
            ")",
            "",
            "# submit script to AML",
            "run = exp.submit(config)",
            "print(run.get_portal_url()) # link to ml.azure.com",
            "$0"
        ],
        "description": "Template for control plane to launch script on AML"
    },

    "AML Template Estimator": {
        "prefix": ["aml-template-estimator"],
        "body": [
            "from azureml.core import Workspace, Experiment, ComputeTarget",
            "from azureml.train.estimator import Estimator",
            "",
            "# get workspace",
            "ws = Workspace.from_config()",
            "",
            "#  get/create experiment",
            "exp = Experiment(ws, '$1')",
            "",
            "# define compute target",
            "compute_target = ComputeTarget(ws, '$2')",
            "",
            "# set up script run configuration",
            "config = Estimator(",
            "    source_directory='.',",
            "    entry_script='$3.py',",
            "    compute_target=compute_target,",
            "    #script_params={'--meaning': 42},",
            ")",
            "",
            "# submit script to AML",
            "run = exp.submit(config)",
            "print(run.get_portal_url()) # link to ml.azure.com",
            "$0"
        ],
        "description": "Template for control plane to launch estimator on AML"
    }
}