(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{109:function(e,t,r){"use strict";r.d(t,"a",(function(){return l})),r.d(t,"b",(function(){return g}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),l=p(r),b=n,g=l["".concat(c,".").concat(b)]||l[b]||m[b]||o;return r?a.a.createElement(g,i(i({ref:t},s),{},{components:r})):a.a.createElement(g,i({ref:t},s))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,c=new Array(o);c[0]=b;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var s=2;s<o;s++)c[s]=r[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},153:function(e,t,r){"use strict";r.r(t),t.default=r.p+"assets/images/compute-target-c55fe2396fc4d44b3739ac2455c89926.png"},99:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return i})),r.d(t,"rightToc",(function(){return u})),r.d(t,"default",(function(){return p}));var n=r(2),a=r(6),o=(r(0),r(109)),c={title:"Compute Target"},i={unversionedId:"compute-targets",id:"version-1.15.0/compute-targets",isDocsHomePage:!1,title:"Compute Target",description:"Compute targets are an AML abstraction around the concept of a compute resource.",source:"@site/versioned_docs/version-1.15.0/compute-targets.md",slug:"/compute-targets",permalink:"/AzureML-CheatSheet/docs/compute-targets",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/versioned_docs/version-1.15.0/compute-targets.md",version:"1.15.0",sidebar:"version-1.15.0/someSidebar",previous:{title:"Workspace",permalink:"/AzureML-CheatSheet/docs/workspace"},next:{title:"Environment",permalink:"/AzureML-CheatSheet/docs/environment"}},u=[{value:"Get Compute Target",id:"get-compute-target",children:[]},{value:"List Existing Compute Targets",id:"list-existing-compute-targets",children:[]},{value:"Check availabilty",id:"check-availabilty",children:[]}],s={rightToc:u};function p(e){var t=e.components,c=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,c,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Compute targets are an AML abstraction around the concept of a compute resource.\nThis can range from your local machine to a cluster of Azure VMs."),Object(o.b)("h3",{id:"get-compute-target"},"Get Compute Target"),Object(o.b)("p",null,"To get an existing compute target within a workspace ",Object(o.b)("inlineCode",{parentName:"p"},"ws"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import ComputeTarget\ntarget = ComputeTarget(ws, '<compute_target_name>')\n")),Object(o.b)("h3",{id:"list-existing-compute-targets"},"List Existing Compute Targets"),Object(o.b)("p",null,"To get a list of compute targets within a workspace ",Object(o.b)("inlineCode",{parentName:"p"},"ws")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"ComputeTarget.list(ws): List[ComputeTarget]\n")),Object(o.b)("h3",{id:"check-availabilty"},"Check availabilty"),Object(o.b)("p",null,"A very common task - especially if you are sharing a workspace within a team - is\nto check the compute resources available within a workspace ",Object(o.b)("inlineCode",{parentName:"p"},"ws")," prior to submitting\na job."),Object(o.b)("p",null,"The easiest way to do this is via the studio."),Object(o.b)("p",null,Object(o.b)("img",{src:r(153).default})))}p.isMDXComponent=!0}}]);