(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{106:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return d}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),u=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=u(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=u(n),b=r,d=l["".concat(i,".").concat(b)]||l[b]||m[b]||a;return n?o.a.createElement(d,c(c({ref:t},p),{},{components:n})):o.a.createElement(d,c({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<a;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},149:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/vs-code-snippets-demo-0cadcf0d99a274246e4001b0ae7d00f3.gif"},90:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(2),o=n(6),a=(n(0),n(106)),i={title:"VS Code Snippets"},c={unversionedId:"vs-code-snippets/snippets",id:"vs-code-snippets/snippets",isDocsHomePage:!1,title:"VS Code Snippets",description:"We have compiled a collection of useful templates in the form of",source:"@site/docs/vs-code-snippets/snippets.md",slug:"/vs-code-snippets/snippets",permalink:"/azureml-cheatsheet/docs/next/vs-code-snippets/snippets",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/vs-code-snippets/snippets.md",version:"current"},s=[{value:"Basic core imports",id:"basic-core-imports",children:[]},{value:"Pipeline imports",id:"pipeline-imports",children:[]},{value:"Create AML Workspace from config",id:"create-aml-workspace-from-config",children:[]},{value:"Create AML Workspace from config and auth",id:"create-aml-workspace-from-config-and-auth",children:[]},{value:"Register Azure Blob Container From SAS",id:"register-azure-blob-container-from-sas",children:[]},{value:"Create Compute Cluster with SSH",id:"create-compute-cluster-with-ssh",children:[]}],p={rightToc:s};function u(e){var t=e.components,i=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,i,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"We have compiled a collection of useful templates in the form of\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://code.visualstudio.com/docs/editor/userdefinedsnippets"}),"VS code snippets"),"."),Object(a.b)("p",null,Object(a.b)("img",{alt:"VS Code Snippets",src:n(149).default})),Object(a.b)("p",null,"To add these snippets to your VS Code: ",Object(a.b)("inlineCode",{parentName:"p"},"ctrl+shift+p"),' > Type "Configure user\nsnippets" > Select ',Object(a.b)("inlineCode",{parentName:"p"},"python.json"),". All of these snippets are available here:\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/aminsaied/AzureML-CheatSheet/blob/master/vs-code-snippets/python.json"}),"python.json")),Object(a.b)("h2",{id:"basic-core-imports"},"Basic core imports"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'"Basic core imports": {\n        "prefix": "workspace-imports-creation",\n        "body": [\n            "from azureml.core import Workspace, Experiment, Run, RunConfiguration, ComputeTarget$1",\n            "$0"\n        ],\n        "description": "Import essential packages"\n    }\n')),Object(a.b)("h2",{id:"pipeline-imports"},"Pipeline imports"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'"Pipeline Imports": {\n        "prefix": "pipeline-imports",\n        "body": [\n            "from azureml.pipeline.core import Pipeline, PipelineData, PipelineParameter",\n            "from azureml.pipeline.steps import PythonScriptStep$1",\n            "$0"\n        ],\n        "description": "Basic imports for pipeline"\n    }\n')),Object(a.b)("h2",{id:"create-aml-workspace-from-config"},"Create AML Workspace from config"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'"Create AML Workspace from config": {\n        "prefix": ["workspace-quick","fromconfig","from-config"],\n        "body": [\n            "ws = Workspace.from_config()",\n            "$0"\n        ],\n        "description": "Default workspace creation"\n    }\n')),Object(a.b)("h2",{id:"create-aml-workspace-from-config-and-auth"},"Create AML Workspace from config and auth"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'"Create AML Workspace from config and auth": {\n        "prefix": "workspace-from-config-auth",\n        "body": [\n            "from azureml.core.authentication import InteractiveLoginAuthentication",\n            "config = {\'subscription_id\':\'$1\',",\n            "\'resource_group\':\'$2\',",\n            "\'workspace_name\' :\'$3\'}",\n            "auth = InteractiveLoginAuthentication()",\n            "ws = Workspace(**config,auth = auth)",\n            "$0"\n        ],\n        "description": "Create workspace from config and auth"\n    }\n')),Object(a.b)("h2",{id:"register-azure-blob-container-from-sas"},"Register Azure Blob Container From SAS"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'"Register Azure Blob Container From SAS": {\n    "prefix": ["datastore-register-blob-sas","reg-blob-sas"],\n    "body": [\n        "ds = Datastore.register_azure_blob_container("\n        "    workspace=\'$1\',"\n        "    datastore_name=\'$2\',",\n        "    container_name=\'$3\',",\n        "    account_name=\'$4\',",\n        "    sas_token=\'$5\',",\n        ")"\n        "$0"\n    ],\n    "description": "Register Azure Blob container to workspace via SAS"\n}\n')),Object(a.b)("h2",{id:"create-compute-cluster-with-ssh"},"Create Compute Cluster with SSH"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'"Create Compute Cluster with SSH": {\n        "prefix": ["create-compute-cluster-ssh"],\n        "body": [\n            "from azureml.core.compute import AmlCompute",\n            "from azureml.core.compute_target import ComputeTargetException",\n            "ssh_public_key = \'$1\'",\n            "compute_config = AmlCompute.provisioning_configuration(vm_size=\'$4\',min_nodes=$5, max_nodes=$6,admin_username=\'$7\',admin_user_ssh_key=ssh_public_key,vm_priority=\'${8|lowpriority,dedicated|}\',remote_login_port_public_access=\'Enabled\')",\n            "cluster$0 = ComputeTarget.create(workspace=$9, name=\'$10\', compute_config)"\n        ],\n        "description": "Create compute cluster with SSH enabled"\n    }\n')))}u.isMDXComponent=!0}}]);