(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{109:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),b=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=b(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=b(n),u=r,d=m["".concat(c,".").concat(u)]||m[u]||l[u]||o;return n?a.a.createElement(d,i(i({ref:t},s),{},{components:n})):a.a.createElement(d,i({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var s=2;s<o;s++)c[s]=n[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},58:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return b}));var r=n(2),a=n(6),o=(n(0),n(109)),c={title:"Cheat Sheet"},i={unversionedId:"cheatsheet",id:"version-1.15.0/cheatsheet",isDocsHomePage:!1,title:"Cheat Sheet",description:"Basic setup",source:"@site/versioned_docs/version-1.15.0/cheatsheet.md",slug:"/cheatsheet",permalink:"/AzureML-CheatSheet/docs/cheatsheet",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/versioned_docs/version-1.15.0/cheatsheet.md",version:"1.15.0",sidebar:"version-1.15.0/someSidebar",previous:{title:"Installation",permalink:"/AzureML-CheatSheet/docs/installation"},next:{title:"Workspace",permalink:"/AzureML-CheatSheet/docs/workspace"}},p=[{value:"Basic setup",id:"basic-setup",children:[]},{value:"Submit code",id:"submit-code",children:[]},{value:"Datastore",id:"datastore",children:[]},{value:"Logging",id:"logging",children:[]}],s={rightToc:p};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"basic-setup"},"Basic setup"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Connect to workspace.")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Workspace\nws = Workspace.from_config()\n")),Object(o.b)("p",null,"For more details: ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"workspace"}),"Workspaces")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Connect to compute target.")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import ComputeTarget\ntarget = ComputeTarget(ws, '<compute-target-name>')\n")),Object(o.b)("p",null,"For more details: ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"compute-targets"}),"Compute Target")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Prepare Python environment."),Object(o.b)("br",{parentName:"p"}),"\n","You can use a ",Object(o.b)("inlineCode",{parentName:"p"},"requirements.txt")," file to define a Python environment on your compute."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\nenv = Environment.from_pip_requirements('<environment-name>', '<path/to/requirements.txt>')\n")),Object(o.b)("p",null,"You can also use conda environments and docker images to prepare your environments.  "),Object(o.b)("p",null,"For more details: ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"environment"}),"Environment")),Object(o.b)("h3",{id:"submit-code"},"Submit code"),Object(o.b)("p",null,"To run code in AML you need to:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Configure"),": Configuration includes specifying the code to run, the compute\ntarget to run on and the Python environment to run in."),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Submit"),": Create or reuse an AML Experiment and submit the run.")),Object(o.b)("h4",{id:"scriptrunconfig-configure"},"ScriptRunConfig (Configure)"),Object(o.b)("p",null,"A typical directory may have the following structure:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"source_directory/\n    script.py    # entry point to your code\n    module1.py   # modules called by script.py     \n    ...\n")),Object(o.b)("p",null,"To run ",Object(o.b)("inlineCode",{parentName:"p"},"$ python script.py")," on a remote compute cluster ",Object(o.b)("inlineCode",{parentName:"p"},"target: ComputeTarget")," with an\nenvironment ",Object(o.b)("inlineCode",{parentName:"p"},"env: Environment")," we use the ",Object(o.b)("inlineCode",{parentName:"p"},"ScriptRunConfig")," class."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import ScriptRunConfig\n\nconfig = ScriptRunConfig(\n    source_directory='<path/to/source_directory>',  # relative paths okay\n    script='script.py',\n    compute_target=target,\n    environment=env,\n)\n")),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(o.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("ul",{parentName:"div"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"compute_target"),": If not provided the script will run on your local machine ",Object(o.b)("strong",{parentName:"li"},"TODO: does this require docker?")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"environment"),": If not provided, uses a default Python environment managed by Azure ML (azureml.core.runconfig.DEFAULT_CPU_IMAGE) ",Object(o.b)("strong",{parentName:"li"},"TODO: provide details on this image"),".")))),Object(o.b)("h4",{id:"experiment-submit"},"Experiment (Submit)"),Object(o.b)("p",null,"To submit this code we create an ",Object(o.b)("inlineCode",{parentName:"p"},"Experiment"),": a light-weight container that helps to\noraganize our submissions and keep track of code (See ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"run-history"}),"Run History"),")."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"exp = Experiment(ws, '<experiment-name>')\nrun = exp.submit(config)\nprint(run.get_portal_url())\n")),Object(o.b)("p",null,"This link will take you to the Azure ML Studio where you can monitor your run."),Object(o.b)("p",null,"For more details: ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"script-run-config"}),"ScriptRunConfig")),Object(o.b)("h3",{id:"datastore"},"Datastore"),Object(o.b)("p",null,"Each workspace comes with a default datastore."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"ds = ws.get_default_datastore()\n")),Object(o.b)("p",null,"Any datastore that is registered to workspace can be accessed by name."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'from azureml.core import Datastore\nds = Datastore.get(ws, "<name-of-registered-datastore>")\n')),Object(o.b)("p",null,"To register a store via a SAS token:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'ds = Datastore.register_azure_blob_container(\n    workspace=ws,\n    datastore_name="<datastore-name>",\n    container_name="<container-name>",\n    account_name="<account-name>",\n    sas_token="<sas-token>",\n)\n')),Object(o.b)("p",null,"For more ways authentication options and for different underlying storage see\nthe AML documentation on\n",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.microsoft.com/en-us/python/api/azureml-core/azureml.core.datastore(class)?view=azure-ml-py"}),"Datastores"),"."),Object(o.b)("h3",{id:"logging"},"Logging"),Object(o.b)("h4",{id:"logging-metrics"},"Logging metrics"),Object(o.b)("p",null,"To log metrics in your running script add the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'from azureml.core import Run\nrun = Run.get_context()\nrun.log("metric-name", metric_value)\n')),Object(o.b)("h4",{id:"viewing-metrics-with-the-python-sdk"},"Viewing metrics with the Python SDK"),Object(o.b)("p",null,"Viewing metrics in a run"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'metrics = run.get_metrics()\n# metrics is of type Dict[str, List[float]] mapping mertic names\n# to a list of the values for that metric in the given run.\n\nmetrics.get("metric-name")\n# list of metrics in the order they were recorded\n')),Object(o.b)("p",null,"To view all recorded values for a given metric ",Object(o.b)("inlineCode",{parentName:"p"},"my-metric")," in a\ngiven experiment ",Object(o.b)("inlineCode",{parentName:"p"},"my-experiment"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"experiments = ws.experiments\n# of type Dict[str, Experiment] mapping experiment names the\n# corresponding Experiment\n\nexp = experiments['my-experiment']\nfor run in exp.get_runs():\n    metrics = run.get_metrics()\n    \n    my_metric = metrics.get('my-metric')\n    if my_metric:\n        print(my_metric)\n")))}b.isMDXComponent=!0}}]);